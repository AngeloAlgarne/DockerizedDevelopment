services:
  # The container_name should preferably be the name of the project

  # Odoo container
  odoo-web:
    container_name: amyu16
    build:
      context: ./projects
      dockerfile: ./Dockerfile.amyu16
    volumes: # /mnt/extra-addons is required, see odoo documentation
    - ./projects/amyu16/amyu1:/mnt/extra-addons/amyu1
    - ./projects/amyu16/ets:/mnt/extra-addons/ets
    - ./projects/amyu16/hrad:/mnt/extra-addons/hrad
    - ./projects/amyu16/tracker:/mnt/extra-addons/tracker
    - ./projects/amyu16/common:/mnt/extra-addons
    - ./projects/amyu16/requirements.txt:/etc/odoo/requirements.txt
    ports:
    - "8069:8069"
    expose:
    - 8069
    environment:
    - HOST=postgres-db
    - USER=odoo # add this user in your database first: CREATE ROLE username WITH LOGIN SUPERUSER PASSWORD 'password';
    - PASSWORD=admin # with the appropriate password

  
  # React container
  # react-web:
  #   container_name: animelist
  #   build:
  #     context: ./projects
  #     dockerfile: ./Dockerfile.animelist
  #   volumes:
  #     - ./projects/animelist:/react
  #   ports:
  #   - "3000:3000"
  #   expose:
  #   - 3000

  # Django container
  # django-web:
  #   container_name: amyu-lms-private
  #   build:
  #     context: ./projects
  #     dockerfile: ./Dockerfile.lms
  #   volumes:
  #     - ./projects/amyu-lms-private:/django
  #   ports:
  #   - "8000:8000"
  #   expose:
  #   - 8000
  
  # Database container
  postgres-db:
    container_name: postgres-db
    image: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=admin
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    expose:
      - 5432
    healthcheck:
      test: psql -U postgres -q -d postgres -c "SELECT 'ready';"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    volumes:
      - postgres-db-data:/var/lib/postgresql/data/pgdata


# NOTE: Uncomment external true if you are trying to **re-attach** the volumes to new docker compose
# The best way to do this so that your data is saved even when database container is deleted:
# - First, run "docker compose up" with the "external: true" commented out
# - Then, rerun "docker compose up" after uncommenting "external: true".
volumes:
  postgres-db-data:
    name: postgres-db-data
    external: true